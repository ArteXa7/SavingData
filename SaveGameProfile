using System;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;

namespace SaveGameProfile
{
    class SaveProfiler
    {
        int intToSave;
        float floatToSave;
        string stringToSave = "";
        
        void SaveGame()
        {
            BinaryFormatter bf = new BinaryFormatter(); 
            FileStream file = File.Create(Application.persistentDataPath 
                                          + "/MySaveData.dat"); 
            SaveData data = new SaveData();
            data.savedInt = intToSave;
            data.savedFloat = floatToSave;
            data.savedBool = boolToSave;
            bf.Serialize(file, data);
            file.Close();
            Debug.Log("Game data saved!");
        }
        
        void LoadGame()
        {
            if (File.Exists(Application.persistentDataPath 
                            + "/MySaveData.dat"))
            {
                BinaryFormatter bf = new BinaryFormatter();
                FileStream file = 
                    File.Open(Application.persistentDataPath 
                              + "/MySaveData.dat", FileMode.Open);
                SaveData data = (SaveData)bf.Deserialize(file);
                file.Close();
                intToSave = data.savedInt;
                floatToSave = data.savedFloat;
                boolToSave = data.savedBool;
                Debug.Log("Game data loaded!");
            }
            else
                Debug.LogError("There is no save data!");
        }
        
        void ResetData()
        {
            if (File.Exists(Application.persistentDataPath 
                            + "/MySaveData.dat"))
            {
                File.Delete(Application.persistentDataPath 
                            + "/MySaveData.dat");
                intToSave = 0;
                floatToSave = 0.0f;
                boolToSave = false;
                Debug.Log("Data reset complete!");
            }
            else
                Debug.LogError("No save data to delete.");
        }
    }

    [Serializable]
    class SaveData
    {
        public int savedInt;
        public float savedFloat;
        public bool savedBool;
    }
    
}
